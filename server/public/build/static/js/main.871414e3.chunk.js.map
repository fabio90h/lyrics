{"version":3,"sources":["queries/fetchSongs.js","components/SongList.js","components/AddSong.js","queries/fetchSongDetails.js","components/LyricCreate.js","components/LyricList.js","components/SongDetail.js","App.js","serviceWorker.js","index.js"],"names":["gql","mutation","SongList","useQuery","fetchSongs","loading","error","data","refetch","useMutation","deleteSong","useEffect","class","songs","map","title","id","key","className","to","onClick","variables","AddSong","useState","songTitle","setSongTitle","addSongTitle","histroy","useHistory","onSubmit","event","a","async","preventDefault","push","console","log","type","onChange","target","value","LyricCreate","lyrics","setLyrics","addLyrics","e","content","songId","LyricList","likeLyric","likes","optimisticResponse","__typename","handleLike","SongDetail","useParams","fetchSongDetails","song","App","exact","path","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.871414e3.chunk.js","sourcesContent":["import {gql} from 'apollo-boost'\n\nexport default gql`\n    {\n        songs{\n            id\n            title\n            lyrics{\n                id\n                content\n            }\n        }\n    }\n`","import React, { useEffect } from 'react'\nimport { gql } from 'apollo-boost'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { Link } from 'react-router-dom'\n\nimport fetchSongs from '../queries/fetchSongs'\n\nfunction SongList(){\n    const {loading, error, data, refetch} = useQuery(fetchSongs)\n    const [deleteSong] = useMutation(mutation) \n\n    useEffect(() => {\n        refetch()\n    })\n\n    if(loading) return <div>Loading...</div>\n    if(error) return <div>Error: </div>\n\n    // Displays the list of songs in the from the query\n    function displaySongs(){\n        return data.songs.map(({title, id}) => {\n            return(\n                <li key={id} className=\"collection-item\">\n                    <Link to={`/songs/${id}`}>{title}</Link>\n                    <i \n                        className=\"material-icons right\" \n                        onClick={() =>  deleteSong({variables: { id }})}\n                    >\n                        delete\n                    </i>\n                </li>\n            )\n        })\n    }\n\n    return (\n        <div>\n            <h3>Song List</h3>\n            <ul class=\"collection\">\n                {displaySongs()}\n            </ul>\n            <ul>\n                {/* Make a red add button to navigate to addSong Component */}\n                <Link \n                    to=\"/songs/new\"\n                    className=\"btn-floating btn-large red right\"\n                >\n                    <i className=\"material-icons\">add</i>\n                </Link>\n            </ul>\n        </div>\n        \n    )\n}\nconst mutation = gql`\n    mutation DeleteSong($id: ID){\n        deleteSong(id: $id){\n            id\n        }\n    }\n`\n\nexport default SongList","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport { Link, useHistory} from 'react-router-dom'\n\nconst AddSong = () => {\n    const [songTitle, setSongTitle] = useState('')\n    const [addSongTitle, {loading, error}] = useMutation(mutation)\n    const histroy = useHistory()\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try{\n            await addSongTitle({variables: {title: songTitle}})\n            histroy.push('/')\n        }\n        catch(error){\n            console.log(error)\n        }\n        \n        setSongTitle('')\n    }\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    return(\n        <div>\n            <Link to=\"/\">Back</Link>\n            <h3>Create a new Song</h3>\n            <form onSubmit={onSubmit}>\n                <label>Song Title:</label>\n                <input \n                    type=\"text\" \n                    onChange={(event) => setSongTitle(event.target.value)} \n                    value={songTitle}\n                />\n            </form>\n        </div>\n    )\n}\n\nconst mutation = gql`\n    mutation AddSong($title: String){\n        addSong(title: $title){\n            title\n            id\n        }\n    }\n`\n\nexport default AddSong","import { gql } from 'apollo-boost'\n\nexport default gql`\n    query SongDetails($id: ID!){\n        song(id: $id){\n            id\n            title\n            lyrics{\n                id\n                content\n                likes\n            }\n        }\n    }\n`","import React, {useState} from 'react'\nimport {gql} from 'apollo-boost'\nimport { useMutation } from '@apollo/react-hooks'\n\nconst LyricCreate = ({id}) => {\n    const [lyrics, setLyrics] = useState('')\n    const [addLyrics] = useMutation(mutation)\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addLyrics({variables: {content: lyrics, songId: id}})\n        setLyrics('')\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <label>Add a Lyric</label>\n            <input type=\"text\" onChange={(e) => setLyrics(e.target.value)} value={lyrics}/>\n        </form>\n    )\n}\n\nconst mutation = gql`\n    mutation AddLyrics($content: String, $songId: ID){\n        addLyricToSong(content: $content, songId: $songId){\n            title\n            id\n            lyrics {\n                id\n                content\n                likes\n            }\n        }\n    }\n`\n\nexport default LyricCreate","import React from 'react'\nimport {gql} from 'apollo-boost'\nimport { useMutation } from '@apollo/react-hooks'\n\nconst LyricList = ({lyrics}) => {\n    const [likeLyric] = useMutation(mutation)\n\n    const handleLike = (id, likes) => {\n        likeLyric({\n            variables: {id},\n            optimisticResponse: {\n                __typename: 'Mutation',\n                likeLyric: {\n                    id,\n                    __typename: 'LyricType',\n                    likes: likes + 1\n                }\n            }\n        })\n    }\n    \n    const printLyricList = () => {\n        return lyrics.map(({content, id, likes}) => {\n            return(\n                <li className=\"collection-item\" key={id}>\n                    {content}\n                    <i \n                        className=\"material-icons right\" \n                        onClick={() => handleLike(id, likes)}\n                    >thumb_up</i>\n                    <span className='right'>{likes}</span>\n                </li>\n            )\n        })\n    }\n\n    return (\n        <ul className=\"collection\">\n            {printLyricList()}\n        </ul>\n    )\n}\n\nconst mutation = gql`\n    mutation likeLyrics($id: ID){\n        likeLyric(id: $id){\n            likes\n            id\n        }\n    }\n`\n\nexport default LyricList","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useParams, Link } from 'react-router-dom'\n\nimport fetchSongDetails from '../queries/fetchSongDetails'\nimport LyricCreate from './LyricCreate'\nimport LyricList from './LyricList'\n\nconst SongDetail = () => {\n    const {id} = useParams()\n    const {loading, error, data} = useQuery(fetchSongDetails, {variables: {id}})\n   \n    if(loading) return <div>Loading...</div>\n    if(error) return <div>Error: </div>\n\n    const {song} = data\n    \n    return(\n        <div>\n            <Link to=\"/\">Back</Link>\n            <h3>{song.title}</h3>\n            <LyricList lyrics={song.lyrics}/>\n            <LyricCreate id={id}/>\n        </div>\n    )\n}\n\nexport default SongDetail","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css';\n\nimport SongList from './components/SongList'\nimport AddSong from './components/AddSong'\nimport SongDetail from './components/SongDetail'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <SongList/>\n          </Route>\n          <Route path=\"/songs/new\">\n            <AddSong/>\n          </Route>\n          <Route path=\"/songs/:id\">\n            <SongDetail/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from '@apollo/react-hooks'\n\nconst client = new ApolloClient({uri: '/graphql'})\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n    , \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}